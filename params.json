{"tagline":"A cool to share DVD on Facebook, using Amazon ECS and Netflix","body":"== Welcome to DVD Flex ==\r\n\r\nDVD is a Facebook Application. It is written using RubyonRails. It is dependent\r\non the followings:\r\n\r\nPlatform:\r\n    Ruby 1.8.7\r\n    Rails 2.2.2\r\n\r\nGems: (gem install *)\r\n    MYSQL 2.7 drivers\r\n    Mongrel\r\n    Ruby-AAWS 0.7\r\n    JSON\r\n    IMDB 0.3\r\n    HTTParty\r\n    Facebooker\r\n    Net-ssh\r\n    Facebooker Authentication\r\n    Tunnlr\r\n    JRails\r\n    Excel\r\n\r\nBecause I used NetBeans IDE as my development environment, you can easily open\r\nup the project with that IDE. However, NetBeans has a bug in the debug mode. The\r\nbug is related to OpenSSL and hashing. As a result, when you run the application\r\nfrom within the NetBeans in the debug mode and try to add an item using UPC code,\r\nRuby-AAWS will complain.\r\n\r\nThe correct way to test the application is to run it in the command prompt with:\r\n% script/server\r\n\r\nAdditionally, you will need to update following configuratiaon files:\r\n1. facebooker.yml - Facebook Application Key and Application Secret.\r\n2. Database.yml - Database connection setting for DVD Flex application.\r\n3. Tunnlr.yml - If you wish to use Tunnlr service.\r\n4. environment/development, production, and test - for Amazon Product Advertisting\r\nAPI's associates and secret ID.\r\n5. .amzonrc file in the root of the folder, used by the ruby-aaws, should match\r\ndevelopment.rb, production.rb, or test.rb.\r\n\r\nAdditionally, if you wish to run the application in a cluster environment with\r\nMongrel/Pound configuration, the following setting can be used.\r\n\r\nPound.cfg:\r\n================================================================================\r\nListenHTTP\r\n\tAddress IP-address of the server\r\n\tPort\t8888\r\n\r\n\t## allow PUT and DELETE also (by default only GET, POST and HEAD)?:\r\n\txHTTP\t\t0\r\n\r\n\tService\r\n\t\tBackEnd\r\n\t\t\tAddress\t127.0.0.1\r\n\t\t\tPort\t8000\r\n\t\tEnd\r\n\t\tBackEnd\r\n\t\t\tAddress\t127.0.0.1\r\n\t\t\tPort\t8001\r\n\t\tEnd\r\n\t\tBackEnd\r\n\t\t\tAddress\t127.0.0.1\r\n\t\t\tPort\t8002\r\n\t\tEnd\r\n\t\tBackEnd\r\n\t\t\tAddress\t127.0.0.1\r\n\t\t\tPort\t8003\r\n\t\tEnd\r\n\tEnd\r\nEnd\r\n================================================================================\r\n\r\nmongrel_cluster.yml: (% mongrel_rails cluster::start)\r\n================================================================================\r\n---\r\ngroup: dvdflex\r\nlog_file: log/mongrel.log\r\nport: \"8000\"\r\ncwd: /home/dvdflex/dvdflex\r\nenvironment: production\r\nuser: dvdflex\r\npid_file: tmp/pids/mongrel.pid\r\nservers: 4\r\n================================================================================\r\n\r\nOn the Facebook application set up, following must be used.\r\n1. Authentication/Post-Authorize Callback URL -  http://IP:8888/listings\r\n2. Authentication/Post-Remove Callback URL -  http://IP:8888/utils/post_remove\r\n3. Canvas/Canvas Callback URL - http://IP:8888/\r\n4. Canvas/Post-Authorize Redirect URL - http://IP:8888 (without the trailing slash)\r\n5. Canvas/Canvas Settings/Render Method - FBML\r\n\r\n================================================================================\r\n\r\nLicense - See apache2_license.txt.\r\n1. You are free to redistribute, reuse any or all part of my code without cost,\r\nprovided that you acknowledge the original code came from me.\r\n2. The license file is maintained with the project.\r\n3. No warranty of any kind is provided except under direct agreement with me.\r\n\r\nRelease date: July 13, 2009\r\n\r\n=================================================================================\r\nSource Code:\r\n<a href=\"http://github.com/raygao/dvdflex/tree/master\">http://github.com/raygao/dvdflex/tree/master</a>\r\n","name":"Dvdflex","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}